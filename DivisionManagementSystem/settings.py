"""
Django settings for DivisionManagementSystem project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

from celery.schedules import crontab
from django.contrib.messages import constants as messages


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ['DEBUG']))

if DEBUG:
    ALLOWED_HOSTS = ['127.0.0.1', '0.0.0.0', 'localhost', 'dms.localhost', 'testmvbachman.com', 'www.testmvbachman.com']
else:
    ALLOWED_HOSTS = [os.environ.get('DOMAIN'), f'www.{os.environ.get("DOMAIN")}']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'employees.apps.EmployeesConfig',
    'employees.templatetags',
    'main.apps.MainConfig',
    'operations.apps.OperationsConfig',
    'crispy_forms',
    'phonenumber_field',
    'bootstrap_daterangepicker',
    'imagekit',
    'notifications',
    'storages',
    'django_cleanup.apps.CleanupConfig',  # This always has to be last in order to discover all file fields properly
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DivisionManagementSystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DivisionManagementSystem.wsgi.application'

# This specifies how logging will be handles throughout this application. I have set it here to ensure all messages that
# are logged using the entry method info or above will show on the console. For more info on how this works go to
# https://docs.djangoproject.com/en/3.1/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": 'django.db.backends.postgresql',
        "NAME": os.environ['SQL_DATABASE'],
        "USER": os.environ['SQL_USER'],
        "PASSWORD": os.environ['SQL_PASSWORD'],
        "HOST": os.environ['SQL_HOST'],
        "PORT": os.environ['SQL_PORT'],
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


USE_S3 = bool(int(os.getenv('USE_S3')))

if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_DEFAULT_ACL = 'private'
    AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN')
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # S3 static settings
    AWS_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    STATICFILES_STORAGE = 'DivisionManagementSystem.storage_backends.StaticStorage'
    # S3 media settings
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
    DEFAULT_FILE_STORAGE = 'DivisionManagementSystem.storage_backends.PublicMediaStorage'
else:
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# Custom User & Log In
AUTH_USER_MODEL = 'employees.Employee'
LOGIN_URL = 'login'

# Crispy Forms
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Phone Number Handling
PHONENUMBER_DEFAULT_REGION = "US"

# Django Messages
MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

# Django Notifications
DJANGO_NOTIFICATIONS_CONFIG = {'USE_JSONFIELD': True}

# Django Emailing
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_PORT = int(os.environ['EMAIL_PORT'])
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
EMAIL_USE_TLS = bool(int(os.environ['EMAIL_USE_TLS']))
DEFAULT_FROM_EMAIL = os.environ['DEFAULT_FROM_EMAIL']

# Celery Settings
CELERY_BROKER_URL = "redis://redis:6379"
CELERY_RESULT_BACKEND = "redis://redis:6379"

# Sites Framework
SITE_ID = 1

# Periodic Tasks
CELERY_BEAT_SCHEDULE = {
    'attendance_cleanup': {
        'task': 'main.tasks.attendance_cleanup',
        'schedule': crontab(minute=0, hour=0)
    },
    'counseling_cleanup': {
        'task': 'main.tasks.counseling_cleanup',
        'schedule': crontab(minute=0, hour=0)
    },
    'safety_point_cleanup': {
        'task': 'main.tasks.safety_point_cleanup',
        'schedule': crontab(minute=0, hour=0)
    },
    'time_off_cleanup': {
        'task': 'main.tasks.time_off_cleanup',
        'schedule': crontab(minute=0, hour=0)
    },
    'attendance_notification': {
        'task': 'main.tasks.attendance_notification',
        'schedule': crontab(minute=0, hour=0)
    },
    'safety_point_notification': {
        'task': 'main.tasks.safety_point_notification',
        'schedule': crontab(minute=0, hour=0)
    },
    'counseling_notification': {
        'task': 'main.tasks.counseling_notification',
        'schedule': crontab(minute=0, hour=0)
    },
    'settlement_notification': {
        'task': 'main.tasks.settlement_notification',
        'schedule': crontab(minute=0, hour=0)
    },
    'employee_check': {
        'task': 'main.tasks.employee_check',
        'schedule': crontab(minute=0, hour=0)
    },
}
