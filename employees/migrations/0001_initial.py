# Generated by Django 3.1.3 on 2020-11-05 23:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import employees.validators
import imagekit.models.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Superuser')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Staff')),
                ('is_part_time', models.BooleanField(default=False, verbose_name='Part Time')),
                ('is_pending_term', models.BooleanField(default=False, verbose_name='Pending Termination')),
                ('is_neighbor_link', models.BooleanField(default=False, verbose_name='NeighborLink Driver')),
                ('email_7attendance', models.BooleanField(default=True, help_text='Receive an email when someone reaches 7 Attendance Points', verbose_name='7 Attendance Points')),
                ('email_10attendance', models.BooleanField(default=True, help_text='Receive an email when someone reaches 10 Attendance Points', verbose_name='10 Attendance Points')),
                ('email_written', models.BooleanField(default=True, help_text='Receive an email when a written warning is issued', verbose_name='Written Warning')),
                ('email_removal', models.BooleanField(default=True, help_text='Receive an email when a removal from service is issued', verbose_name='Removal from Service')),
                ('email_safety_point', models.BooleanField(default=True, help_text='Receive an email when a Safety Point is issued', verbose_name='Safety Point')),
                ('email_termination', models.BooleanField(default=True, help_text='Receive an email when an Employee is Terminated', verbose_name='Termination')),
                ('email_add_hold', models.BooleanField(default=True, help_text='Receive an email when an Employee is placed on hold', verbose_name='Placed on Hold')),
                ('email_rem_hold', models.BooleanField(default=True, help_text='Receive an email when a hold is removed from an Employee', verbose_name='Removed from Hold')),
                ('email_add_settlement', models.BooleanField(default=True, help_text='Receive an email when a settlement is issued', verbose_name='Assign Settlement')),
                ('employee_id', models.IntegerField(null=True, unique=True, verbose_name='Employee ID')),
                ('primary_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Primary Phone Number')),
                ('secondary_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Secondary Phone Number')),
                ('paid_sick', models.IntegerField(default=3, verbose_name='Paid Sick')),
                ('unpaid_sick', models.IntegerField(default=2, verbose_name='Unpaid Sick')),
                ('floating_holiday', models.IntegerField(default=2, verbose_name='Floating Holiday')),
                ('first_name', models.CharField(max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=30, verbose_name='Last Name')),
                ('username', models.CharField(max_length=30, unique=True, verbose_name='Username')),
                ('position', models.CharField(choices=[('', ''), ('mechanic', 'Mechanic'), ('utility', 'Utility'), ('dispatcher', 'Dispatcher'), ('dispatch_sup', 'Dispatch Supervisor'), ('driver_scheduler', 'Driver Scheduler'), ('hiring_supervisor', 'Hiring Supervisor'), ('clerk', 'Clerk'), ('driver', 'Driver'), ('agm', 'AGM'), ('gm', 'GM'), ('it_manager', 'IT Manager')], max_length=30, verbose_name='Position')),
                ('termination_type', models.CharField(choices=[('', ''), ('0', 'Voluntary'), ('1', 'Involuntary')], max_length=30, null=True, verbose_name='Termination Type')),
                ('termination_comments', models.TextField(blank=True, default='', verbose_name='Comments')),
                ('hire_date', models.DateField(null=True, verbose_name='Hire Date')),
                ('application_date', models.DateField(null=True, verbose_name='Application Date')),
                ('classroom_date', models.DateField(null=True, verbose_name='Classroom Date')),
                ('removal_date', models.DateField(blank=True, null=True, verbose_name='Removal Date')),
                ('termination_date', models.DateField(blank=True, null=True, verbose_name='Termination Date')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('profile_picture', imagekit.models.fields.ProcessedImageField(upload_to='profile_pictures')),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
                'permissions': [('can_view_all_accounts', 'Can view all accounts'), ('can_edit_employee_info', 'Can edit employee information'), ('can_delete_attendance', 'Can delete attendance records'), ('can_edit_attendance', 'Can edit attendance records'), ('can_download_attendance', 'Can download attendance records'), ('can_assign_counseling', 'Can assign counseling'), ('can_delete_counseling', 'Can delete counseling'), ('can_edit_counseling', 'Can edit counseling'), ('can_download_counseling', 'Can download counseling'), ('can_assign_safety_point', 'Can assign safety point'), ('can_delete_safety_point', 'Can delete safety point'), ('can_edit_safety_point', 'Can edit safety point'), ('can_download_safety_point', 'Can download safety point'), ('can_place_hold', 'Can place hold'), ('can_remove_hold', 'Can remove hold'), ('can_remove_employee', 'Can remove employee'), ('can_terminate_employee', 'Can remove employee'), ('can_export_profile', 'Can export profile'), ('can_export_attendance_history', 'Can export attendance history'), ('can_export_safety_history', 'Can export safety history'), ('can_export_counseling_history', 'Can export counseling history'), ('can_view_settlement', 'Can view settlement'), ('can_create_settlement', 'Can create settlement'), ('can_upload_profile_picture', 'Can upload profile'), ('can_view_employee_info', 'Can view employee info'), ('can_export_phone_list', 'Can export phone list'), ('can_export_seniority_list', 'Can export seniority list'), ('can_export_driver_list', 'Can export driver list'), ('can_export_main_custom_list', 'Can export main custom list'), ('can_view_import_data', 'Can view import data'), ('can_import_driver_data', 'Can import driver data'), ('can_import_attendance_data', 'Can import attendance data'), ('can_import_safety_point_data', 'Can import safety point data'), ('can_add_employee', 'Can add employee'), ('can_view_hold_list', 'Can view hold list'), ('can_view_attendance_reports', 'Can view attendance reports'), ('can_view_counseling_reports', 'Can view counseling reports'), ('can_add_time_off_request', 'Can add time off request'), ('can_view_time_off_reports', 'Can view time off reports'), ('can_view_termination_reports', 'Can view termination reports')],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('incident_date', models.DateField()),
                ('issued_date', models.DateField(null=True)),
                ('points', models.DecimalField(decimal_places=1, max_digits=2)),
                ('document', models.FileField(upload_to='attendance_forms', validators=[employees.validators.pdf_extension])),
                ('reason', models.CharField(choices=[('', ''), ('0', 'Unexcused'), ('1', 'Consecutive'), ('2', '< 1 HR'), ('3', 'NCNS'), ('4', 'FTC'), ('5', 'Missing Safety Meeting'), ('6', '< 15 MIN'), ('7', '> 15 MIN'), ('8', 'Late Lunch')], max_length=30)),
                ('assigned_by', models.CharField(max_length=50)),
                ('exemption', models.CharField(blank=True, choices=[('', ''), ('0', 'FMLA'), ('1', 'Paid Sick'), ('2', 'Unpaid Sick'), ('3', 'Union Agreement'), ('4', 'Excused Absence')], max_length=30, null=True)),
                ('edited_date', models.DateField(null=True)),
                ('edited_by', models.CharField(blank=True, default='', max_length=30)),
                ('downloaded', models.BooleanField(default=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('full_name', models.CharField(max_length=30, unique=True)),
                ('display_name', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='TimeOffRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateField()),
                ('time_off_type', models.CharField(choices=[('', ''), ('0', 'Day(s) Off (Unpaid)'), ('1', 'Vacation (Paid)'), ('2', 'Leave of Absence'), ('3', 'Jury Duty / Subpoena'), ('4', 'Military Leave'), ('5', 'Extended Medical Leave'), ('6', 'Family Medical Leave'), ('7', 'Floating Holiday'), ('8', 'Personal'), ('9', 'Doctor Appointment'), ('10', 'Other')], max_length=50)),
                ('status', models.CharField(choices=[('0', 'Pending'), ('1', 'Approved'), ('2', 'Denied')], default='0', max_length=50)),
                ('status_change_by', models.CharField(blank=True, max_length=50)),
                ('reason', models.TextField(blank=True)),
                ('comments', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('date_removed', models.DateField(null=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Settlement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.TextField(default='')),
                ('created_date', models.DateField(null=True)),
                ('assigned_by', models.CharField(default='', max_length=50)),
                ('document', models.FileField(null=True, upload_to='settlement_forms', validators=[employees.validators.pdf_extension])),
                ('is_active', models.BooleanField(default=True)),
                ('employee', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SafetyPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('incident_date', models.DateField()),
                ('issued_date', models.DateField(null=True)),
                ('points', models.IntegerField()),
                ('document', models.FileField(upload_to='safety_point_forms', validators=[employees.validators.pdf_extension])),
                ('reason', models.CharField(choices=[('0', 'Unsafe maneuver(s) or act'), ('1', 'Failure to cycle wheelchair lift'), ('2', 'Failure to do a proper vehicle inspection (DVI)'), ('3', 'Improper following distance'), ('4', 'Conviction of a minor traffic violation'), ('5', 'Backing Accident'), ('6', 'Minor Preventable incident'), ('7', 'Any use of a cell phone or non company-issued electronic device while operating a vehicle'), ('8', 'Major preventable incident that does not involve serious injury, death and/or property damage in excess of $25,000'), ('9', 'Major preventable incident with serious injury, death and/or property damage in excess of $25,000'), ('10', 'Any preventable roll-away incident'), ('11', 'Failure to properly secure/transport a mobility device'), ('12', 'Failure to immediately report a citation or incident in a company vehicle'), ('13', 'Tampering with, disabling, or otherwise interfering with Drive Cam or other monitoring equipment'), ('14', 'Conviction of a major traffic violation')], max_length=30)),
                ('unsafe_act', models.CharField(blank=True, max_length=100)),
                ('details', models.TextField(default='')),
                ('assigned_by', models.CharField(max_length=50)),
                ('downloaded', models.BooleanField(default=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Hold',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hold_date', models.DateField()),
                ('incident_date', models.DateField(null=True)),
                ('training_datetime', models.DateTimeField(null=True)),
                ('release_date', models.DateTimeField(null=True)),
                ('reason', models.CharField(max_length=30)),
                ('assigned_by', models.CharField(max_length=40)),
                ('employee', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DayOff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('time_off_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='employees.timeoffrequest')),
            ],
        ),
        migrations.CreateModel(
            name='Counseling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_by', models.CharField(max_length=40)),
                ('issued_date', models.DateField()),
                ('action_type', models.CharField(choices=[('0', 'Verbal Counseling'), ('1', 'Verbal Warning'), ('2', 'First Written Warning Notice'), ('3', 'Final Written Warning Notice & 3 Day Suspension'), ('4', 'Last & Final Warning'), ('5', 'Discharge for "Just Cause"'), ('6', 'Administrative Removal from Service')], max_length=40)),
                ('document', models.FileField(upload_to='counseling_forms', validators=[employees.validators.pdf_extension])),
                ('hearing_datetime', models.DateTimeField(null=True)),
                ('conduct', models.TextField()),
                ('conversation', models.TextField()),
                ('downloaded', models.BooleanField(default=False)),
                ('attendance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='employees.attendance')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('safety_point', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='employees.safetypoint')),
            ],
        ),
        migrations.AddField(
            model_name='employee',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='employees.company', verbose_name='Company'),
        ),
        migrations.AddField(
            model_name='employee',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='employee',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
